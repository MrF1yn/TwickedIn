{"version":3,"file":"zoom-DyHfBf_y.mjs","sources":["../../../node_modules/lodash-es/flatten.js","../../../node_modules/lodash-es/_flatRest.js","../../../node_modules/lodash-es/_baseSlice.js","../../../node_modules/lodash-es/_parent.js","../../../node_modules/lodash-es/_baseUnset.js","../../../node_modules/lodash-es/_customOmitClone.js","../../../node_modules/lodash-es/omit.js","../src/services/canvas-zoom.ts","../src/services/essentials/events.ts","../src/services/essentials/files.ts","../src/services/essentials/transitions.ts","../../../node_modules/date-fns/compareAsc.mjs","../../../node_modules/date-fns/differenceInCalendarYears.mjs","../../../node_modules/date-fns/differenceInYears.mjs","../../../node_modules/date-fns/addMonths.mjs","../../../node_modules/date-fns/addYears.mjs","../../../node_modules/date-fns/subYears.mjs","../../../node_modules/date-fns/differenceInCalendarMonths.mjs","../../../node_modules/date-fns/endOfDay.mjs","../../../node_modules/date-fns/endOfMonth.mjs","../../../node_modules/date-fns/isLastDayOfMonth.mjs","../../../node_modules/date-fns/differenceInMonths.mjs","../../../node_modules/date-fns/subMonths.mjs","../../../node_modules/date-fns/differenceInDays.mjs","../../../node_modules/date-fns/addDays.mjs","../../../node_modules/date-fns/subDays.mjs","../../../node_modules/date-fns/_lib/getRoundingMethod.mjs","../../../node_modules/date-fns/differenceInMilliseconds.mjs","../../../node_modules/date-fns/differenceInHours.mjs","../../../node_modules/date-fns/addMilliseconds.mjs","../../../node_modules/date-fns/addHours.mjs","../../../node_modules/date-fns/subHours.mjs","../../../node_modules/date-fns/differenceInMinutes.mjs","../../../node_modules/date-fns/addMinutes.mjs","../../../node_modules/date-fns/subMinutes.mjs","../../../node_modules/date-fns/differenceInSeconds.mjs","../../../node_modules/date-fns/addSeconds.mjs","../../../node_modules/date-fns/subSeconds.mjs","../src/services/scales-cartesian.ts","../src/services/curves.ts","../src/services/zoom.ts"],"sourcesContent":["import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseGet from './_baseGet.js';\nimport baseSlice from './_baseSlice.js';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","import castPath from './_castPath.js';\nimport last from './last.js';\nimport parent from './_parent.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nexport default baseUnset;\n","import isPlainObject from './isPlainObject.js';\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nexport default customOmitClone;\n","import arrayMap from './_arrayMap.js';\nimport baseClone from './_baseClone.js';\nimport baseUnset from './_baseUnset.js';\nimport castPath from './_castPath.js';\nimport copyObject from './_copyObject.js';\nimport customOmitClone from './_customOmitClone.js';\nimport flatRest from './_flatRest.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nexport default omit;\n","import { select } from 'd3'\nimport { Service } from './service'\nimport { Events } from '@/interfaces/enums'\nimport { canvasZoomSettings } from '@/configuration'\nimport { DOMUtils } from '@/services/essentials/dom-utils'\n\nexport class CanvasZoom extends Service {\n\tprotected model: any\n\n\t/**\n\t * focal:  object to zoom into\n\t * canvasElements: all the elements to translate and zoom on the chart area\n\t * zoomSettings: object containing duration, easing and zoomlevel for the zoom behaviours\n\t *  */\n\tzoomIn(focal: any, canvasElements: any, zoomSettings?: any) {\n\t\tlet x: number\n\t\tlet y: number\n\t\tlet zoomLevel: number\n\t\tconst settings = zoomSettings ? zoomSettings : canvasZoomSettings\n\n\t\tif (focal) {\n\t\t\tx = focal.x\n\t\t\ty = focal.y\n\t\t\tzoomLevel = 2\n\t\t}\n\n\t\t// the 'viewport' size of the chart\n\t\tconst { width, height } = DOMUtils.getSVGElementSize(this.services.domUtils.getHolder(), {\n\t\t\tuseClientDimensions: true\n\t\t})\n\n\t\tcanvasElements\n\t\t\t.transition()\n\t\t\t.duration(settings.duration)\n\t\t\t.ease(settings.ease)\n\t\t\t.attr(\n\t\t\t\t'transform',\n\t\t\t\t`translate(${width / 2}, ${height / 2}) scale(${zoomLevel}) translate(${-x},${-y})`\n\t\t\t)\n\n\t\t// Dispatch canvas zoom in event\n\t\tthis.services.events.dispatchEvent(Events.CanvasZoom.CANVAS_ZOOM_IN, {\n\t\t\telement: select(focal)\n\t\t})\n\t}\n\n\tzoomOut(canvasElements: any, zoomSettings?: any) {\n\t\tconst settings = zoomSettings ? zoomSettings : canvasZoomSettings\n\t\tcanvasElements\n\t\t\t.transition()\n\t\t\t.duration(settings.duration)\n\t\t\t.ease(settings.ease)\n\t\t\t.attr('transform', '')\n\n\t\t// Dispatch canvas zoom out event\n\t\tthis.services.events.dispatchEvent(Events.CanvasZoom.CANVAS_ZOOM_OUT)\n\t}\n}\n","import { Service } from '@/services/service'\n\nexport class Events extends Service {\n\t// DOM Event target\n\tdocumentFragment: DocumentFragment\n\n\tinit() {\n\t\t// Setup the event fragment on the DOM\n\t\tthis.documentFragment = document.createDocumentFragment()\n\t}\n\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject) {\n\t\tthis.documentFragment.addEventListener(type, listener)\n\t}\n\n\tremoveEventListener(type: string, listener: EventListenerOrEventListenerObject) {\n\t\tthis.documentFragment.removeEventListener(type, listener)\n\t}\n\n\tdispatchEvent(eventType: string, eventDetail?: object) {\n\t\tlet newEvent: any\n\t\tif (eventDetail) {\n\t\t\tnewEvent = new CustomEvent(eventType, {\n\t\t\t\tdetail: eventDetail\n\t\t\t})\n\t\t} else {\n\t\t\tnewEvent = document.createEvent('Event')\n\t\t\tnewEvent.initEvent(eventType, false, true)\n\t\t}\n\n\t\tthis.documentFragment.dispatchEvent(newEvent)\n\t}\n}\n","import { Service } from '@/services/service'\nimport { ChartModel } from '@/model/model'\n\nexport class Files extends Service {\n\tconstructor(model: ChartModel, services: any) {\n\t\tsuper(model, services)\n\t}\n\n\tdownloadCSV(content: any, filename: string) {\n\t\tconst anchor = document.createElement('a')\n\t\tconst mimeType = 'text/csv;encoding:utf-8'\n\n\t\tif (navigator['msSaveBlob']) {\n\t\t\t// Internet Explorer 10\n\t\t\tnavigator['msSaveBlob'](\n\t\t\t\tnew Blob([content], {\n\t\t\t\t\ttype: mimeType\n\t\t\t\t}),\n\t\t\t\tfilename\n\t\t\t)\n\t\t} else if (URL && 'download' in anchor) {\n\t\t\t// HTML5\n\t\t\tconst href = URL.createObjectURL(\n\t\t\t\tnew Blob([content], {\n\t\t\t\t\ttype: mimeType\n\t\t\t\t})\n\t\t\t)\n\t\t\tanchor.href = href\n\t\t\tanchor.setAttribute('download', filename)\n\n\t\t\t// Add anchor to body\n\t\t\tdocument.body.appendChild(anchor)\n\n\t\t\t// Click anchor\n\t\t\tanchor.click()\n\n\t\t\t// Remove anchor from body\n\t\t\tdocument.body.removeChild(anchor)\n\t\t\tURL.revokeObjectURL(href)\n\t\t} else {\n\t\t\tlocation.href = `data:application/octet-stream,${encodeURIComponent(content)}`\n\t\t}\n\t}\n\n\tdownloadImage(uri: string, name: string) {\n\t\tconst link = document.createElement('a')\n\t\tlink.download = name\n\t\tlink.href = uri\n\t\tdocument.body.appendChild(link)\n\t\tlink.click()\n\t\tdocument.body.removeChild(link)\n\t}\n}\n","import { getProperty } from '@/tools'\nimport { transitions as transitionConfigs } from '@/configuration'\nimport { Service } from '@/services/service'\nimport { Events } from '@/interfaces/enums'\nimport type { Transition } from 'd3'\n\nexport interface setupTransitionConfigs {\n\ttransition?: any // d3 types are causing issues here, hence why using `any`\n\tname?: string\n\tanimate?: boolean\n}\n\nexport class Transitions extends Service {\n\tpendingTransitions: Record<number, Transition<any, any, any, any>> = {}\n\n\tinit() {\n\t\tthis.services.events?.addEventListener(Events.Model.UPDATE, () => {\n\t\t\tthis.pendingTransitions = {}\n\t\t})\n\t}\n\n\tsetupTransition({ transition: t, name, animate }: setupTransitionConfigs) {\n\t\tthis.pendingTransitions[t._id] = t\n\t\tt.on('end interrupt cancel', () => {\n\t\t\tdelete this.pendingTransitions[t._id]\n\t\t})\n\n\t\tif (this.model.getOptions().animations === false || animate === false) {\n\t\t\treturn t.duration(0)\n\t\t}\n\n\t\treturn t.duration(\n\t\t\tgetProperty(transitionConfigs, name, 'duration') || transitionConfigs.default.duration\n\t\t)\n\t}\n\n\tgetPendingTransitions() {\n\t\treturn this.pendingTransitions\n\t}\n}\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\nexport function differenceInCalendarYears(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  return _dateLeft.getFullYear() - _dateRight.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(differenceInCalendarYears(_dateLeft, _dateRight));\n\n  // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n  _dateLeft.setFullYear(1584);\n  _dateRight.setFullYear(1584);\n\n  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastYearNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n  const result = sign * (difference - +isLastYearNotFull);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount) {\n  return addMonths(date, amount * 12);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { addYears } from \"./addYears.mjs\";\n\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be subtracted.\n *\n * @returns The new date with the years subtracted\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\nexport function subYears(date, amount) {\n  return addYears(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subYears;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be subtracted.\n *\n * @returns The new date with the months subtracted\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function subMonths(date, amount) {\n  return addMonths(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subMonths;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(differenceInCalendarDays(_dateLeft, _dateRight));\n\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(_dateLeft, _dateRight) === -sign,\n  );\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  const diff =\n    dateLeft.getFullYear() - dateRight.getFullYear() ||\n    dateLeft.getMonth() - dateRight.getMonth() ||\n    dateLeft.getDate() - dateRight.getDate() ||\n    dateLeft.getHours() - dateRight.getHours() ||\n    dateLeft.getMinutes() - dateRight.getMinutes() ||\n    dateLeft.getSeconds() - dateRight.getSeconds() ||\n    dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { addDays } from \"./addDays.mjs\";\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount) {\n  return addDays(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { addHours } from \"./addHours.mjs\";\n\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be subtracted.\n *\n * @returns The new date with the hours subtracted\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\nexport function subHours(date, amount) {\n  return addHours(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subHours;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMinutes } from \"./addMinutes.mjs\";\n\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be subtracted.\n *\n * @returns The new date with the minutes subtracted\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\nexport function subMinutes(date, amount) {\n  return addMinutes(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount) {\n  return addMilliseconds(date, amount * 1000);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { addSeconds } from \"./addSeconds.mjs\";\n\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be subtracted.\n *\n * @returns The new date with the seconds subtracted\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\nexport function subSeconds(date, amount) {\n  return addSeconds(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subSeconds;\n","import {\n\textent,\n\tmax,\n\tscaleBand,\n\tscaleLinear,\n\tscaleTime,\n\tscaleLog,\n\ttype ScaleTime,\n\ttype ScaleBand,\n\ttype ScaleLinear\n} from 'd3'\nimport { differenceInYears } from 'date-fns/differenceInYears'\nimport { addYears } from 'date-fns/addYears'\nimport { subYears } from 'date-fns/subYears'\nimport { differenceInMonths } from 'date-fns/differenceInMonths'\nimport { addMonths } from 'date-fns/addMonths'\nimport { subMonths } from 'date-fns/subMonths'\nimport { differenceInDays } from 'date-fns/differenceInDays'\nimport { addDays } from 'date-fns/addDays'\nimport { subDays } from 'date-fns/subDays'\nimport { differenceInHours } from 'date-fns/differenceInHours'\nimport { addHours } from 'date-fns/addHours'\nimport { subHours } from 'date-fns/subHours'\nimport { differenceInMinutes } from 'date-fns/differenceInMinutes'\nimport { addMinutes } from 'date-fns/addMinutes'\nimport { subMinutes } from 'date-fns/subMinutes'\nimport { differenceInSeconds } from 'date-fns/differenceInSeconds'\nimport { subSeconds } from 'date-fns/subSeconds'\nimport { addSeconds } from 'date-fns/addSeconds'\nimport { flatten, omit, uniq } from 'lodash-es'\nimport { getProperty } from '@/tools'\nimport { axis as axisConfigs } from '@/configuration'\nimport { Service } from './service'\nimport { AxisPositions, CartesianOrientations, ScaleTypes } from '@/interfaces/enums'\nimport { ThresholdOptions } from '@/interfaces/components'\n\nexport type ScaleFunction =\n\t| ScaleTime<number, number, never>\n\t| ScaleBand<string>\n\t| ScaleLinear<number, number, never>\n\nexport class CartesianScales extends Service {\n\tprotected scaleTypes = {\n\t\ttop: null as ScaleTypes,\n\t\tright: null as ScaleTypes,\n\t\tbottom: null as ScaleTypes,\n\t\tleft: null as ScaleTypes\n\t}\n\n\tprotected scales = {\n\t\t// null or function\n\t\ttop: null as ScaleLinear<number, number, never>,\n\t\tright: null as ScaleLinear<number, number, never>,\n\t\tbottom: null as ScaleLinear<number, number, never>,\n\t\tleft: null as ScaleLinear<number, number, never>\n\t}\n\n\tprotected domainAxisPosition: AxisPositions\n\tprotected rangeAxisPosition: AxisPositions\n\tprotected secondaryDomainAxisPosition: AxisPositions\n\tprotected secondaryRangeAxisPosition: AxisPositions\n\n\tprotected dualAxes: boolean\n\n\tprotected orientation: CartesianOrientations\n\n\tgetDomainAxisPosition({ datum = null }: { datum?: any } = {}) {\n\t\tif (this.dualAxes && datum) {\n\t\t\tconst options = this.model.getOptions()\n\t\t\tconst { groupMapsTo } = options.data\n\t\t\tconst axesOptions = getProperty(options, 'axes', this.secondaryDomainAxisPosition)\n\t\t\tconst dataset = datum[groupMapsTo]\n\t\t\tif (\n\t\t\t\taxesOptions?.correspondingDatasets &&\n\t\t\t\taxesOptions.correspondingDatasets.includes(dataset)\n\t\t\t) {\n\t\t\t\treturn this.secondaryDomainAxisPosition\n\t\t\t}\n\t\t}\n\t\treturn this.domainAxisPosition\n\t}\n\n\tgetRangeAxisPosition({ datum = null, groups = null }: { datum?: any; groups?: any } = {}) {\n\t\tif (this.dualAxes) {\n\t\t\tconst options = this.model.getOptions()\n\t\t\tconst { groupMapsTo } = options.data\n\t\t\tconst axisOptions = getProperty(options, 'axes', this.secondaryRangeAxisPosition)\n\t\t\tlet dataset\n\t\t\tif (datum !== null) {\n\t\t\t\tdataset = datum[groupMapsTo]\n\t\t\t} else if (groups && groups.length > 0) {\n\t\t\t\tdataset = groups[0]\n\t\t\t}\n\t\t\tif (\n\t\t\t\taxisOptions?.correspondingDatasets &&\n\t\t\t\taxisOptions.correspondingDatasets.includes(dataset)\n\t\t\t) {\n\t\t\t\treturn this.secondaryRangeAxisPosition\n\t\t\t}\n\t\t}\n\t\treturn this.rangeAxisPosition\n\t}\n\n\tgetAxisOptions(position: AxisPositions) {\n\t\treturn getProperty(this.model.getOptions(), 'axes', position)\n\t}\n\n\tgetDomainAxisOptions() {\n\t\tconst domainAxisPosition = this.getDomainAxisPosition()\n\t\treturn this.getAxisOptions(domainAxisPosition)\n\t}\n\n\tgetRangeAxisOptions() {\n\t\tconst rangeAxisPosition = this.getRangeAxisPosition()\n\t\treturn this.getAxisOptions(rangeAxisPosition)\n\t}\n\n\tgetScaleLabel(position: AxisPositions) {\n\t\tconst axisOptions = this.getAxisOptions(position)\n\t\tconst title: string = axisOptions.title\n\t\tif (!title) {\n\t\t\tif (position === AxisPositions.BOTTOM || position === AxisPositions.TOP) {\n\t\t\t\treturn 'x-value'\n\t\t\t}\n\t\t\treturn 'y-value'\n\t\t}\n\t\treturn title\n\t}\n\n\tgetDomainLabel() {\n\t\treturn this.getScaleLabel(this.getDomainAxisPosition())\n\t}\n\n\tgetRangeLabel() {\n\t\treturn this.getScaleLabel(this.getRangeAxisPosition())\n\t}\n\n\tupdate() {\n\t\tthis.determineAxisDuality()\n\t\tthis.findDomainAndRangeAxes()\n\t\tthis.determineOrientation()\n\t\tconst axisPositions: AxisPositions[] = Object.keys(AxisPositions).map(\n\t\t\t(axisPositionKey: string) => AxisPositions[axisPositionKey as keyof typeof AxisPositions]\n\t\t)\n\t\taxisPositions.forEach(axisPosition => {\n\t\t\tthis.scales[axisPosition] = this.createScale(axisPosition) as ScaleLinear<\n\t\t\t\tnumber,\n\t\t\t\tnumber,\n\t\t\t\tnever\n\t\t\t>\n\t\t})\n\t}\n\n\tfindDomainAndRangeAxes() {\n\t\t// find main axes between (left & right) && (bottom & top)\n\t\tconst verticalAxesPositions = this.findVerticalAxesPositions()\n\t\tconst horizontalAxesPositions = this.findHorizontalAxesPositions()\n\n\t\t// Now we have horizontal & vertical main axes to choose domain & range axes from\n\t\tconst domainAndRangeAxesPositions = this.findDomainAndRangeAxesPositions(\n\t\t\tverticalAxesPositions,\n\t\t\thorizontalAxesPositions\n\t\t)\n\n\t\tthis.domainAxisPosition = domainAndRangeAxesPositions.primaryDomainAxisPosition\n\t\tthis.rangeAxisPosition = domainAndRangeAxesPositions.primaryRangeAxisPosition\n\n\t\tif (this.isDualAxes()) {\n\t\t\tthis.secondaryDomainAxisPosition = domainAndRangeAxesPositions.secondaryDomainAxisPosition\n\t\t\tthis.secondaryRangeAxisPosition = domainAndRangeAxesPositions.secondaryRangeAxisPosition\n\t\t}\n\t}\n\n\tdetermineOrientation() {\n\t\tif (\n\t\t\t(this.rangeAxisPosition === AxisPositions.LEFT ||\n\t\t\t\tthis.rangeAxisPosition === AxisPositions.RIGHT) &&\n\t\t\t(this.domainAxisPosition === AxisPositions.BOTTOM ||\n\t\t\t\tthis.domainAxisPosition === AxisPositions.TOP)\n\t\t) {\n\t\t\tthis.orientation = CartesianOrientations.VERTICAL\n\t\t} else {\n\t\t\tthis.orientation = CartesianOrientations.HORIZONTAL\n\t\t}\n\t}\n\n\tisDualAxes() {\n\t\treturn this.dualAxes\n\t}\n\n\t// if any of the axes objects have correspondingDatasets [] asserted we flag the chart as dual axes\n\t// it does not count as dual axes if it just has another axis turned on but is not actually using it to map a dataset\n\tdetermineAxisDuality() {\n\t\tconst options = this.model.getOptions()\n\t\tconst axesOptions = getProperty(options, 'axes')\n\n\t\tif (\n\t\t\t(axesOptions[AxisPositions.LEFT]?.correspondingDatasets &&\n\t\t\t\taxesOptions[AxisPositions.RIGHT]) ||\n\t\t\t(axesOptions[AxisPositions.RIGHT]?.correspondingDatasets &&\n\t\t\t\taxesOptions[AxisPositions.LEFT]) ||\n\t\t\t(axesOptions[AxisPositions.TOP]?.correspondingDatasets &&\n\t\t\t\taxesOptions[AxisPositions.BOTTOM]) ||\n\t\t\t(axesOptions[AxisPositions.BOTTOM]?.correspondingDatasets && axesOptions[AxisPositions.TOP])\n\t\t) {\n\t\t\tthis.dualAxes = true\n\t\t}\n\t}\n\n\tgetCustomDomainValuesByposition(axisPosition: AxisPositions) {\n\t\tconst domain = getProperty(this.model.getOptions(), 'axes', axisPosition, 'domain')\n\n\t\t// Check if domain is an array\n\t\tif (domain && !Array.isArray(domain)) {\n\t\t\tthrow new Error(`Domain in ${axisPosition} axis is not a valid array`)\n\t\t}\n\n\t\t// Determine number of elements passed in domain depending on scale types\n\t\tif (Array.isArray(domain)) {\n\t\t\tif (\n\t\t\t\t(this.scaleTypes[axisPosition] === ScaleTypes.LINEAR ||\n\t\t\t\t\tthis.scaleTypes[axisPosition] === ScaleTypes.TIME) &&\n\t\t\t\tdomain.length !== 2\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`There can only be 2 elements in domain for scale type: ${this.scaleTypes[axisPosition]}`\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn domain\n\t}\n\n\tgetOrientation() {\n\t\treturn this.orientation\n\t}\n\n\tgetScaleByPosition(axisPosition: AxisPositions) {\n\t\treturn this.scales[axisPosition]\n\t}\n\n\tgetScaleTypeByPosition(axisPosition: AxisPositions) {\n\t\treturn this.scaleTypes[axisPosition]\n\t}\n\n\tgetDomainAxisScaleType() {\n\t\tconst domainAxisPosition = this.getDomainAxisPosition()\n\t\treturn this.getScaleTypeByPosition(domainAxisPosition)\n\t}\n\n\tgetRangeAxisScaleType() {\n\t\tconst rangeAxisPosition = this.getRangeAxisPosition()\n\t\treturn this.getScaleTypeByPosition(rangeAxisPosition)\n\t}\n\n\tgetDomainScale() {\n\t\treturn this.scales[this.domainAxisPosition]\n\t}\n\n\tgetRangeScale() {\n\t\treturn this.scales[this.rangeAxisPosition]\n\t}\n\n\t// Find the main x-axis out of the 2 x-axis on the chart (when 2D axis is used)\n\tgetMainXAxisPosition() {\n\t\tconst possibleXAxisPositions = [AxisPositions.BOTTOM, AxisPositions.TOP]\n\n\t\treturn [this.domainAxisPosition, this.rangeAxisPosition].find(\n\t\t\tposition => possibleXAxisPositions.indexOf(position) > -1\n\t\t)\n\t}\n\n\t// Find the main y-axis out of the 2 y-axis on the chart (when 2D axis is used)\n\tgetMainYAxisPosition() {\n\t\tconst possibleYAxisPositions = [AxisPositions.LEFT, AxisPositions.RIGHT]\n\n\t\treturn [this.domainAxisPosition, this.rangeAxisPosition].find(\n\t\t\tposition => possibleYAxisPositions.indexOf(position) > -1\n\t\t)\n\t}\n\n\tgetMainXScale() {\n\t\treturn this.scales[this.getMainXAxisPosition()]\n\t}\n\n\tgetMainYScale() {\n\t\treturn this.scales[this.getMainYAxisPosition()]\n\t}\n\n\tgetValueFromScale(scale: any, scaleType: ScaleTypes, axisPosition: AxisPositions, datum: any) {\n\t\tconst options = this.model.getOptions()\n\t\tconst axesOptions = getProperty(options, 'axes')\n\t\tconst axisOptions = axesOptions[axisPosition]\n\t\tconst { mapsTo } = axisOptions\n\t\tconst value = getProperty(datum, mapsTo) !== null ? datum[mapsTo] : datum\n\t\tlet scaledValue: number\n\t\tswitch (scaleType) {\n\t\t\tcase ScaleTypes.LABELS:\n\t\t\t\tscaledValue = scale(value) + scale.step() / 2\n\t\t\t\tbreak\n\t\t\tcase ScaleTypes.TIME:\n\t\t\t\tscaledValue = scale(new Date(value))\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tscaledValue = scale(value)\n\t\t}\n\t\treturn scaledValue\n\t}\n\n\tgetBoundedScaledValues(datum: any): number[] {\n\t\tconst { bounds } = this.model.getOptions()\n\t\tconst axisPosition = this.getRangeAxisPosition({ datum })\n\t\tconst scale = this.scales[axisPosition]\n\n\t\tconst options = this.model.getOptions()\n\t\tconst axesOptions = getProperty(options, 'axes')\n\t\tconst axisOptions = axesOptions[axisPosition]\n\t\tconst { mapsTo } = axisOptions\n\t\tconst value = datum[mapsTo] !== undefined ? datum[mapsTo] : datum\n\n\t\tconst boundedValues = [\n\t\t\tscale(\n\t\t\t\tgetProperty(datum, bounds.upperBoundMapsTo) !== null\n\t\t\t\t\t? datum[bounds.upperBoundMapsTo]\n\t\t\t\t\t: value\n\t\t\t),\n\t\t\tscale(\n\t\t\t\tgetProperty(datum, bounds.lowerBoundMapsTo) !== null\n\t\t\t\t\t? datum[bounds.lowerBoundMapsTo]\n\t\t\t\t\t: value\n\t\t\t)\n\t\t]\n\n\t\treturn boundedValues\n\t}\n\n\tgetValueThroughAxisPosition(axisPosition: AxisPositions, datum: any) {\n\t\tconst scaleType = this.scaleTypes[axisPosition] as ScaleTypes\n\t\tconst scale = this.scales[axisPosition]\n\n\t\treturn this.getValueFromScale(scale, scaleType, axisPosition, datum)\n\t}\n\n\tgetDomainValue(d: string | object) {\n\t\tconst axisPosition = this.getDomainAxisPosition({ datum: d })\n\t\treturn this.getValueThroughAxisPosition(axisPosition, d)\n\t}\n\n\tgetRangeValue(d: number | string | object) {\n\t\tconst axisPosition = this.getRangeAxisPosition({ datum: d })\n\t\treturn this.getValueThroughAxisPosition(axisPosition, d)\n\t}\n\n\tgetMainXScaleType() {\n\t\treturn this.getScaleTypeByPosition(this.getMainXAxisPosition())\n\t}\n\n\tgetMainYScaleType() {\n\t\treturn this.getScaleTypeByPosition(this.getMainYAxisPosition())\n\t}\n\n\tgetDomainIdentifier(datum?: any) {\n\t\tconst options = this.model.getOptions()\n\t\treturn getProperty(options, 'axes', this.getDomainAxisPosition({ datum: datum }), 'mapsTo')\n\t}\n\n\tgetRangeIdentifier(datum?: any) {\n\t\tconst options = this.model.getOptions()\n\t\treturn getProperty(options, 'axes', this.getRangeAxisPosition({ datum: datum }), 'mapsTo')\n\t}\n\n\textendsDomain(axisPosition: AxisPositions, domain: any) {\n\t\tconst options = this.model.getOptions()\n\t\tconst axisOptions = getProperty(options, 'axes', axisPosition)\n\t\tif (axisOptions.scaleType === ScaleTypes.TIME) {\n\t\t\tconst spaceToAddToEdges = getProperty(options, 'timeScale', 'addSpaceOnEdges')\n\t\t\treturn addSpacingToTimeDomain(domain, spaceToAddToEdges)\n\t\t} else {\n\t\t\treturn addSpacingToContinuousDomain(domain, axisConfigs.paddingRatio, axisOptions.scaleType)\n\t\t}\n\t}\n\n\tprotected findVerticalAxesPositions() {\n\t\tconst options = this.model.getOptions()\n\t\tconst axesOptions = getProperty(options, 'axes')\n\t\tconst dualAxes = this.isDualAxes()\n\n\t\t// If right axis has been specified as `main`\n\t\tif (\n\t\t\t(getProperty(axesOptions, AxisPositions.LEFT) === null &&\n\t\t\t\tgetProperty(axesOptions, AxisPositions.RIGHT) !== null) ||\n\t\t\tgetProperty(axesOptions, AxisPositions.RIGHT, 'main') === true ||\n\t\t\t(dualAxes && getProperty(axesOptions, AxisPositions.LEFT, 'correspondingDatasets'))\n\t\t) {\n\t\t\treturn {\n\t\t\t\tprimary: AxisPositions.RIGHT,\n\t\t\t\tsecondary: AxisPositions.LEFT\n\t\t\t}\n\t\t}\n\n\t\treturn { primary: AxisPositions.LEFT, secondary: AxisPositions.RIGHT }\n\t}\n\n\tprotected findHorizontalAxesPositions() {\n\t\tconst options = this.model.getOptions()\n\t\tconst axesOptions = getProperty(options, 'axes')\n\t\tconst dualAxes = this.isDualAxes()\n\n\t\t// If top axis has been specified as `main`\n\t\tif (\n\t\t\t(getProperty(axesOptions, AxisPositions.BOTTOM) === null &&\n\t\t\t\tgetProperty(axesOptions, AxisPositions.TOP) !== null) ||\n\t\t\tgetProperty(axesOptions, AxisPositions.TOP, 'main') === true ||\n\t\t\t(dualAxes && getProperty(axesOptions, AxisPositions.BOTTOM, 'correspondingDatasets'))\n\t\t) {\n\t\t\treturn {\n\t\t\t\tprimary: AxisPositions.TOP,\n\t\t\t\tsecondary: AxisPositions.BOTTOM\n\t\t\t}\n\t\t}\n\n\t\treturn { primary: AxisPositions.BOTTOM, secondary: AxisPositions.TOP }\n\t}\n\n\tprotected findDomainAndRangeAxesPositions(\n\t\tverticalAxesPositions: any,\n\t\thorizontalAxesPositions: any\n\t) {\n\t\tconst options = this.model.getOptions()\n\n\t\tconst mainVerticalAxisOptions = getProperty(options, 'axes', verticalAxesPositions.primary)\n\t\tconst mainHorizontalAxisOptions = getProperty(options, 'axes', horizontalAxesPositions.primary)\n\n\t\tconst mainVerticalScaleType = mainVerticalAxisOptions.scaleType || ScaleTypes.LINEAR\n\t\tconst mainHorizontalScaleType = mainHorizontalAxisOptions.scaleType || ScaleTypes.LINEAR\n\n\t\tconst result = {\n\t\t\tprimaryDomainAxisPosition: null as AxisPositions,\n\t\t\tsecondaryDomainAxisPosition: null as AxisPositions,\n\t\t\tprimaryRangeAxisPosition: null as AxisPositions,\n\t\t\tsecondaryRangeAxisPosition: null as AxisPositions\n\t\t}\n\n\t\t// assign to to be a vertical chart by default\n\t\tresult.primaryDomainAxisPosition = horizontalAxesPositions.primary\n\t\tresult.primaryRangeAxisPosition = verticalAxesPositions.primary\n\t\t// secondary axes\n\t\tresult.secondaryDomainAxisPosition = horizontalAxesPositions.secondary\n\t\tresult.secondaryRangeAxisPosition = verticalAxesPositions.secondary\n\n\t\t// if neither the horizontal axes are label or time\n\t\t// and atleast  one of the main vertical ones are labels or time then it should be horizontal\n\t\tif (\n\t\t\t(!(\n\t\t\t\tmainHorizontalScaleType === ScaleTypes.LABELS || mainHorizontalScaleType === ScaleTypes.TIME\n\t\t\t) &&\n\t\t\t\tmainVerticalScaleType === ScaleTypes.LABELS) ||\n\t\t\tmainVerticalScaleType === ScaleTypes.TIME\n\t\t) {\n\t\t\tresult.primaryDomainAxisPosition = verticalAxesPositions.primary\n\t\t\tresult.primaryRangeAxisPosition = horizontalAxesPositions.primary\n\t\t\t// secondary axes\n\t\t\tresult.secondaryDomainAxisPosition = verticalAxesPositions.secondary\n\t\t\tresult.secondaryRangeAxisPosition = horizontalAxesPositions.secondary\n\t\t}\n\n\t\treturn result\n\t}\n\n\tgetScaleDomain(axisPosition: AxisPositions) {\n\t\tconst options = this.model.getOptions()\n\t\tconst axisOptions = getProperty(options, 'axes', axisPosition)\n\t\tconst bounds = getProperty(options, 'bounds')\n\t\tconst { includeZero } = axisOptions\n\t\tconst scaleType = getProperty(axisOptions, 'scaleType') || ScaleTypes.LINEAR\n\n\t\tif (this.model.isDataEmpty()) {\n\t\t\treturn []\n\t\t}\n\n\t\tif (axisOptions.binned) {\n\t\t\tconst { bins } = this.model.getBinConfigurations()\n\n\t\t\treturn [0, max(bins, (d: any) => d.length)]\n\t\t} else if (axisOptions.limitDomainToBins) {\n\t\t\tconst { bins } = this.model.getBinConfigurations()\n\t\t\tconst stackKeys = this.model.getStackKeys({ bins })\n\n\t\t\treturn [stackKeys[0].split(':')[0], stackKeys[stackKeys.length - 1].split(':')[1]]\n\t\t}\n\n\t\tconst displayData = this.model.getDisplayData()\n\t\tconst { extendLinearDomainBy, mapsTo, percentage, thresholds } = axisOptions\n\t\tconst { reference: ratioReference, compareTo: ratioCompareTo } = axisConfigs.ratio\n\n\t\t// If domain is specified return that domain\n\t\tif (axisOptions.domain) {\n\t\t\tif (scaleType === ScaleTypes.LABELS) {\n\t\t\t\treturn axisOptions.domain\n\t\t\t} else if (scaleType === ScaleTypes.TIME) {\n\t\t\t\taxisOptions.domain = axisOptions.domain.map((d: any) =>\n\t\t\t\t\td.getTime === undefined ? new Date(d) : d\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn this.extendsDomain(axisPosition, axisOptions.domain)\n\t\t}\n\n\t\t// Return [0, 100] for percentage axis scale\n\t\tif (percentage) {\n\t\t\treturn [0, 100]\n\t\t}\n\n\t\t// If scale is a LABELS scale, return some labels as the domain\n\t\tif (axisOptions && scaleType === ScaleTypes.LABELS) {\n\t\t\t// Get unique values\n\t\t\treturn uniq(displayData.map((d: any) => d[mapsTo]))\n\t\t}\n\n\t\t// Get the extent of the domain\n\t\tlet domain: any\n\t\tlet allDataValues: any\n\t\tconst dataGroupNames = this.model.getDataGroupNames()\n\n\t\tif (scaleType === ScaleTypes.LABELS_RATIO) {\n\t\t\treturn displayData.map((datum: any) => `${datum[ratioReference]}/${datum[ratioCompareTo]}`)\n\t\t} else if (scaleType === ScaleTypes.TIME) {\n\t\t\tallDataValues = displayData.map((datum: any) => +new Date(datum[mapsTo]))\n\t\t} else if (bounds && options.axes) {\n\t\t\tallDataValues = []\n\n\t\t\tdisplayData.forEach((datum: any) => {\n\t\t\t\tallDataValues.push(datum[mapsTo])\n\n\t\t\t\tif (datum[bounds.upperBoundMapsTo]) {\n\t\t\t\t\tallDataValues.push(datum[bounds.upperBoundMapsTo])\n\t\t\t\t}\n\t\t\t\tif (datum[bounds.lowerBoundMapsTo]) {\n\t\t\t\t\tallDataValues.push(datum[bounds.lowerBoundMapsTo])\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (\n\t\t\taxisOptions.stacked === true &&\n\t\t\tdataGroupNames &&\n\t\t\taxisPosition === this.getRangeAxisPosition()\n\t\t) {\n\t\t\tconst { groupMapsTo } = options.data\n\t\t\tconst dataValuesGroupedByKeys = this.model.getDataValuesGroupedByKeys({\n\t\t\t\tgroups: dataGroupNames\n\t\t\t})\n\t\t\tconst nonStackedGroupsData = displayData.filter(\n\t\t\t\t(datum: any) => !dataGroupNames.includes(datum[groupMapsTo])\n\t\t\t)\n\n\t\t\tconst stackedValues: any[] = []\n\t\t\tdataValuesGroupedByKeys.forEach((dataValues: any) => {\n\t\t\t\tconst { ...numericalValues } = dataValues\n\n\t\t\t\tlet positiveSum = 0,\n\t\t\t\t\tnegativeSum = 0\n\t\t\t\tObject.values(omit(numericalValues, 'sharedStackKey')).forEach((value: number) => {\n\t\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\t\tnegativeSum += value\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpositiveSum += value\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tstackedValues.push([negativeSum, positiveSum])\n\t\t\t})\n\n\t\t\tallDataValues = [\n\t\t\t\t...flatten(stackedValues),\n\t\t\t\t...nonStackedGroupsData.map((datum: any) => datum[mapsTo])\n\t\t\t]\n\t\t} else {\n\t\t\tallDataValues = []\n\n\t\t\tdisplayData.forEach((datum: any) => {\n\t\t\t\tconst value = datum[mapsTo]\n\t\t\t\tif (Array.isArray(value) && value.length === 2) {\n\t\t\t\t\tallDataValues.push(value[0])\n\t\t\t\t\tallDataValues.push(value[1])\n\t\t\t\t} else {\n\t\t\t\t\tif (extendLinearDomainBy) {\n\t\t\t\t\t\tallDataValues.push(Math.max(datum[mapsTo], datum[extendLinearDomainBy]))\n\t\t\t\t\t}\n\t\t\t\t\tallDataValues.push(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\t// Time can never be 0 and log of base 0 is -Infinity\n\t\tif (scaleType !== ScaleTypes.TIME && scaleType !== ScaleTypes.LOG && includeZero) {\n\t\t\tallDataValues.push(0)\n\t\t}\n\n\t\t// Add threshold values into the scale\n\t\tif (thresholds && thresholds.length > 0) {\n\t\t\tthresholds.forEach((threshold: any) => {\n\t\t\t\tconst thresholdValue = getProperty(threshold, 'value')\n\t\t\t\tif (thresholdValue !== null) allDataValues.push(thresholdValue)\n\t\t\t})\n\t\t}\n\n\t\tdomain = extent(allDataValues)\n\t\tdomain = this.extendsDomain(axisPosition, domain)\n\n\t\treturn domain\n\t}\n\n\tprotected createScale(axisPosition: AxisPositions) {\n\t\tconst options = this.model.getOptions()\n\t\tconst axisOptions = getProperty(options, 'axes', axisPosition)\n\n\t\tif (!axisOptions) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst scaleType = getProperty(axisOptions, 'scaleType') || ScaleTypes.LINEAR\n\t\tthis.scaleTypes[axisPosition] = scaleType\n\n\t\tlet scale: ScaleFunction\n\t\tif (scaleType === ScaleTypes.TIME) {\n\t\t\tscale = scaleTime()\n\t\t} else if (scaleType === ScaleTypes.LOG) {\n\t\t\tscale = scaleLog().base(axisOptions.base || 10)\n\t\t} else if (scaleType === ScaleTypes.LABELS || scaleType === ScaleTypes.LABELS_RATIO) {\n\t\t\tscale = scaleBand()\n\t\t} else {\n\t\t\tscale = scaleLinear()\n\t\t}\n\n\t\tscale.domain(this.getScaleDomain(axisPosition))\n\n\t\treturn scale\n\t}\n\n\tgetDomainLowerBound(position: any): number {\n\t\tlet domainRange: number[]\n\t\tlet lowerBound = 0\n\n\t\t// get domain ranges based on orientations\n\t\tif (this.getOrientation() === CartesianOrientations.VERTICAL) {\n\t\t\tdomainRange = this.getMainYScale().domain() as number[]\n\t\t} else {\n\t\t\tdomainRange = this.getMainXScale().domain() as number[]\n\t\t}\n\n\t\tif (getProperty(this.model.getOptions(), 'axes', position, 'includeZero') === false) {\n\t\t\t// get domain lowerBound if all are positive values\n\t\t\tif (domainRange[0] > 0 && domainRange[1] > 0) {\n\t\t\t\tlowerBound = domainRange[0]\n\t\t\t}\n\t\t}\n\n\t\treturn lowerBound\n\t}\n\n\tgetHighestDomainThreshold(): null | {\n\t\tthreshold: ThresholdOptions\n\t\tscaleValue: number\n\t} {\n\t\tconst axesOptions = getProperty(this.model.getOptions(), 'axes')\n\t\tconst domainAxisPosition = this.getDomainAxisPosition()\n\n\t\tconst { thresholds } = axesOptions[domainAxisPosition]\n\n\t\t// Check if thresholds exist & is not empty\n\t\tif (!Array.isArray(thresholds) || (Array.isArray(thresholds) && !thresholds.length)) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst domainScale = this.getDomainScale()\n\t\t// Find the highest threshold for the domain\n\t\tconst highestThreshold = thresholds.sort((a, b) => b.value - a.value)[0]\n\n\t\tconst scaleType = this.getScaleTypeByPosition(domainAxisPosition)\n\t\tif (\n\t\t\tscaleType === ScaleTypes.TIME &&\n\t\t\t(typeof highestThreshold.value === 'string' || highestThreshold.value.getTime === undefined)\n\t\t) {\n\t\t\thighestThreshold.value = new Date(highestThreshold.value)\n\t\t}\n\n\t\treturn {\n\t\t\tthreshold: highestThreshold,\n\t\t\tscaleValue: domainScale(highestThreshold.value)\n\t\t}\n\t}\n\n\tgetHighestRangeThreshold(): null | {\n\t\tthreshold: ThresholdOptions\n\t\tscaleValue: number\n\t} {\n\t\tconst axesOptions = getProperty(this.model.getOptions(), 'axes')\n\t\tconst rangeAxisPosition = this.getRangeAxisPosition()\n\n\t\tconst { thresholds } = axesOptions[rangeAxisPosition]\n\n\t\t// Check if thresholds exist & is not empty\n\t\tif (!Array.isArray(thresholds) || (Array.isArray(thresholds) && !thresholds.length)) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst rangeScale = this.getRangeScale()\n\t\t// Find the highest threshold for the range\n\t\tconst highestThreshold = thresholds.sort((a, b) => b.value - a.value)[0]\n\n\t\treturn {\n\t\t\tthreshold: highestThreshold,\n\t\t\tscaleValue: rangeScale(highestThreshold.value)\n\t\t}\n\t}\n}\n\nfunction addSpacingToTimeDomain(domain: any, spaceToAddToEdges: number) {\n\tconst startDate = new Date(domain[0])\n\tconst endDate = new Date(domain[1])\n\n\tif (differenceInYears(endDate, startDate) > 1) {\n\t\treturn [subYears(startDate, spaceToAddToEdges), addYears(endDate, spaceToAddToEdges)]\n\t}\n\n\tif (differenceInMonths(endDate, startDate) > 1) {\n\t\treturn [subMonths(startDate, spaceToAddToEdges), addMonths(endDate, spaceToAddToEdges)]\n\t}\n\n\tif (differenceInDays(endDate, startDate) > 1) {\n\t\treturn [subDays(startDate, spaceToAddToEdges), addDays(endDate, spaceToAddToEdges)]\n\t}\n\n\tif (differenceInHours(endDate, startDate) > 1) {\n\t\treturn [subHours(startDate, spaceToAddToEdges), addHours(endDate, spaceToAddToEdges)]\n\t}\n\n\tif (differenceInMinutes(endDate, startDate) > 30) {\n\t\treturn [\n\t\t\tsubMinutes(startDate, spaceToAddToEdges * 30),\n\t\t\taddMinutes(endDate, spaceToAddToEdges * 30)\n\t\t]\n\t}\n\n\tif (differenceInMinutes(endDate, startDate) > 1) {\n\t\treturn [subMinutes(startDate, spaceToAddToEdges), addMinutes(endDate, spaceToAddToEdges)]\n\t}\n\n\tif (differenceInSeconds(endDate, startDate) > 15) {\n\t\treturn [\n\t\t\tsubSeconds(startDate, spaceToAddToEdges * 15),\n\t\t\taddSeconds(endDate, spaceToAddToEdges * 15)\n\t\t]\n\t}\n\n\tif (differenceInSeconds(endDate, startDate) > 1) {\n\t\treturn [subSeconds(startDate, spaceToAddToEdges), addSeconds(endDate, spaceToAddToEdges)]\n\t}\n\n\treturn [startDate, endDate]\n}\n\nfunction addSpacingToContinuousDomain(\n\t[lower, upper]: number[],\n\tpaddingRatio: number,\n\tscaleType?: ScaleTypes\n) {\n\tconst domainLength = upper - lower\n\tconst padding = domainLength * paddingRatio\n\n\t// If padding crosses 0, keep 0 as new upper bound\n\tconst newUpper = upper <= 0 && upper + padding > 0 ? 0 : upper + padding\n\t// If padding crosses 0, keep 0 as new lower bound\n\tlet newLower = lower >= 0 && lower - padding < 0 ? 0 : lower - padding\n\n\t// Log of base 0 or a negative number is -Infinity\n\tif (scaleType === ScaleTypes.LOG && newLower <= 0) {\n\t\tif (lower <= 0) {\n\t\t\tthrow Error('Data must have values greater than 0 if log scale type is used.')\n\t\t}\n\t\tnewLower = lower\n\t}\n\n\treturn [newLower, newUpper]\n}\n","import {\n\tcurveBasis,\n\tcurveBasisClosed,\n\tcurveBasisOpen,\n\tcurveBundle,\n\tcurveCardinal,\n\tcurveCardinalClosed,\n\tcurveCardinalOpen,\n\tcurveCatmullRom,\n\tcurveCatmullRomClosed,\n\tcurveCatmullRomOpen,\n\tcurveLinear,\n\tcurveLinearClosed,\n\tcurveMonotoneX,\n\tcurveMonotoneY,\n\tcurveNatural,\n\tcurveStep,\n\tcurveStepAfter,\n\tcurveStepBefore\n} from 'd3'\nimport { Service } from './service'\n\nexport class Curves extends Service {\n\tcurveTypes = {\n\t\tcurveLinear,\n\t\tcurveLinearClosed,\n\t\tcurveBasis,\n\t\tcurveBasisClosed,\n\t\tcurveBasisOpen,\n\t\tcurveBundle,\n\t\tcurveCardinal,\n\t\tcurveCardinalClosed,\n\t\tcurveCardinalOpen,\n\t\tcurveCatmullRom,\n\t\tcurveCatmullRomClosed,\n\t\tcurveCatmullRomOpen,\n\t\tcurveMonotoneX,\n\t\tcurveMonotoneY,\n\t\tcurveNatural,\n\t\tcurveStep,\n\t\tcurveStepAfter,\n\t\tcurveStepBefore\n\t}\n\n\tgetD3Curve() {\n\t\tlet curveName = 'curveLinear' as keyof typeof this.curveTypes\n\t\tconst curveOptions = this.model.getOptions().curve\n\n\t\t// Parse curve type whether the user provided a string\n\t\t// Or an object with more options\n\t\tif (curveOptions) {\n\t\t\tif (typeof curveOptions === 'string') {\n\t\t\t\t// curve: 'string'\n\t\t\t\tcurveName = curveOptions as keyof typeof this.curveTypes\n\t\t\t} else {\n\t\t\t\t// curve: { name: 'string' }\n\t\t\t\tcurveName = curveOptions.name\n\t\t\t}\n\t\t}\n\n\t\tif (this.curveTypes[curveName]) {\n\t\t\t// Grab correct d3 curve function\n\t\t\tlet curve = this.curveTypes[curveName] as any\n\n\t\t\t// Apply user-provided options to the d3 curve\n\t\t\tif (curveOptions) {\n\t\t\t\tObject.keys(curveOptions).forEach(optionName => {\n\t\t\t\t\tif (curve[optionName]) {\n\t\t\t\t\t\tcurve = curve[optionName](curveOptions[optionName])\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn curve\n\t\t}\n\n\t\tconsole.warn(`The curve type '${curveName}' is invalid, using 'curveLinear' instead`)\n\t\treturn this.curveTypes['curveLinear']\n\t}\n}\n","import { extent } from 'd3'\nimport { getProperty } from '@/tools'\nimport { zoomBar as zoomBarConfigs } from '@/configuration'\nimport { AxisPositions, Events, ScaleTypes } from '@/interfaces/enums'\nimport { Service } from './service'\n\nimport type { ChartModelCartesian } from '../model'\n\nexport class Zoom extends Service {\n\tprotected model: ChartModelCartesian\n\n\tisZoomBarEnabled() {\n\t\t// CartesianScales service is only available in axis charts\n\t\tif (!this.services.cartesianScales) {\n\t\t\treturn false\n\t\t}\n\n\t\t// @todo - need to update this if zoom bar in other position (bottom, left, right) is supported\n\t\t// check configuration\n\t\tif (!getProperty(this.model.getOptions(), 'zoomBar', 'top', 'enabled')) {\n\t\t\treturn false\n\t\t}\n\n\t\t// @todo - Zoom Bar only supports main axis at BOTTOM axis and time scale for now\n\t\tthis.services.cartesianScales.findDomainAndRangeAxes() // need to do this before getMainXAxisPosition()\n\t\tconst mainXAxisPosition = this.services.cartesianScales.getMainXAxisPosition()\n\t\tconst mainXScaleType = getProperty(\n\t\t\tthis.model.getOptions(),\n\t\t\t'axes',\n\t\t\tmainXAxisPosition,\n\t\t\t'scaleType'\n\t\t)\n\n\t\treturn mainXAxisPosition === AxisPositions.BOTTOM && mainXScaleType === ScaleTypes.TIME\n\t}\n\n\t// get display data for zoom bar\n\t// basically it's sum of value grouped by time\n\tgetZoomBarData() {\n\t\tconst customZoomBarData = this.model.getZoomBarData()\n\n\t\t// if user already defines zoom bar data, use it\n\t\tif (customZoomBarData && customZoomBarData.length > 1) {\n\t\t\treturn customZoomBarData\n\t\t} else {\n\t\t\t// use displayData if not defined\n\t\t\treturn this.model.getDisplayData()\n\t\t}\n\t}\n\n\tgetDefaultZoomBarDomain(zoomBarData?: any) {\n\t\tif (!this.services.zoom) throw new Error('Services zoom not defined')\n\t\tconst allZoomBarData = zoomBarData || this.services.zoom.getZoomBarData()\n\t\tconst { cartesianScales } = this.services\n\t\tif (!cartesianScales) throw new Error('Services cartesianScales undefined')\n\t\tconst mainXAxisPosition = cartesianScales.getMainXAxisPosition()\n\t\tconst domainIdentifier = cartesianScales.getDomainIdentifier()\n\n\t\tconst customDomain = getProperty(this.model.getOptions(), 'axes', mainXAxisPosition, 'domain')\n\n\t\t// return custom domain if exists && valid\n\t\tif (Array.isArray(customDomain) && customDomain.length === 2) {\n\t\t\treturn customDomain\n\t\t}\n\n\t\t// default to full range with extended domain\n\t\tif (!mainXAxisPosition) throw new Error('Not defined: mainXAxisPosition')\n\t\treturn cartesianScales.extendsDomain(\n\t\t\tmainXAxisPosition,\n\t\t\textent(allZoomBarData, (d: any) => d[domainIdentifier])\n\t\t)\n\t}\n\n\thandleDomainChange(newDomain: any, configs = { dispatchEvent: true }) {\n\t\tthis.model.set({ zoomDomain: newDomain }, { animate: false })\n\t\tif (configs.dispatchEvent) {\n\t\t\tthis.services.events?.dispatchEvent(Events.ZoomDomain.CHANGE, {\n\t\t\t\tnewDomain\n\t\t\t})\n\t\t}\n\t}\n\n\tgetZoomRatio() {\n\t\treturn getProperty(this.model.getOptions(), 'zoomBar', 'zoomRatio')\n\t}\n\n\t// filter out data not inside zoom domain\n\t// to get better range value for axis label\n\tfilterDataForRangeAxis(displayData: object[], configs?: any) {\n\t\tconst zoomDomain = this.model.get('zoomDomain')\n\t\tconst mergedConfigs = Object.assign(\n\t\t\t{ stacked: false }, // default configs\n\t\t\tconfigs\n\t\t)\n\t\tconst shouldUpdateRangeAxis = getProperty(this.model.getOptions(), 'zoomBar', 'updateRangeAxis')\n\t\tif (this.isZoomBarEnabled() && shouldUpdateRangeAxis && zoomDomain) {\n\t\t\tconst domainIdentifier = mergedConfigs.stacked\n\t\t\t\t? 'sharedStackKey'\n\t\t\t\t: this.services.cartesianScales?.getDomainIdentifier()\n\t\t\tconst filteredData = displayData.filter(\n\t\t\t\t(datum: any) =>\n\t\t\t\t\tnew Date(datum[domainIdentifier]) >= zoomDomain[0] &&\n\t\t\t\t\tnew Date(datum[domainIdentifier]) <= zoomDomain[1]\n\t\t\t)\n\t\t\t// if no data in zoom domain, use all data to get full range value\n\t\t\t// so only return filteredData if length > 0\n\t\t\tif (filteredData.length > 0) {\n\t\t\t\treturn filteredData\n\t\t\t}\n\t\t}\n\t\t// return original data by default\n\t\treturn displayData\n\t}\n\n\tzoomIn(zoomRatio = this.getZoomRatio()) {\n\t\t// get current zoomDomain\n\t\tconst currentZoomDomain = this.model.get('zoomDomain')\n\t\tconst handleWidth = zoomBarConfigs.handleWidth\n\t\tconst xScale = this.services.cartesianScales?.getMainXScale().copy()\n\t\txScale.domain(this.getDefaultZoomBarDomain()) // reset domain to default full domain\n\n\t\t// use scale range (rather than domain) to calculate\n\t\t// current zoom bar handle x position\n\t\tconst currentX0 = xScale(currentZoomDomain[0])\n\t\tconst currentX1 = xScale(currentZoomDomain[1])\n\n\t\t// zoom bar handles are already too close\n\t\tif (currentX1 - currentX0 < handleWidth + 1) {\n\t\t\treturn\n\t\t}\n\t\tconst fullRange = xScale.range()\n\t\tconst gap = currentX1 - currentX0\n\t\tconst diff = Math.min(((fullRange[1] - fullRange[0]) / 2) * (zoomRatio / 2), gap / 2)\n\n\t\t// new zoom bar handle x position\n\t\tlet newX0 = currentX0 + diff\n\t\tlet newX1 = currentX1 - diff\n\t\t// if left handle becomes right side of right handle, just make them close to each other\n\t\tif (newX0 >= newX1) {\n\t\t\tnewX0 = currentX0 + gap / 2 - handleWidth / 2\n\t\t\tnewX1 = currentX1 - gap / 2 + handleWidth / 2\n\t\t}\n\n\t\tconst newDomain = [xScale.invert(newX0), xScale.invert(newX1)]\n\n\t\t// only if zoomDomain needs update\n\t\tif (\n\t\t\tcurrentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n\t\t\tcurrentZoomDomain[1].valueOf() !== newDomain[1].valueOf()\n\t\t) {\n\t\t\tthis.handleDomainChange(newDomain)\n\t\t}\n\t}\n\n\tzoomOut(zoomRatio = this.getZoomRatio()) {\n\t\t// get current zoomDomain\n\t\tconst currentZoomDomain = this.model.get('zoomDomain')\n\n\t\tif (!this.services.cartesianScales) throw new Error('Services cartesianScales undefined')\n\t\tconst xScale = this.services.cartesianScales.getMainXScale().copy()\n\n\t\txScale.domain(this.getDefaultZoomBarDomain()) // reset domain to default full domain\n\n\t\t// use scale range (rather than domain) to calculate\n\t\t// current zoom bar handle x position\n\t\tconst currentX0 = xScale(currentZoomDomain[0])\n\t\tconst currentX1 = xScale(currentZoomDomain[1])\n\n\t\tconst fullRange = xScale.range()\n\t\tconst diff = ((fullRange[1] - fullRange[0]) / 2) * (zoomRatio / 2)\n\n\t\t// new zoom bar handle x position\n\t\t// max to full range\n\t\tconst newX0 = Math.max(currentX0 - diff, fullRange[0])\n\t\tconst newX1 = Math.min(currentX1 + diff, fullRange[1])\n\n\t\tconst newDomain = [xScale.invert(newX0), xScale.invert(newX1)]\n\n\t\t// only if zoomDomain needs update\n\t\tif (\n\t\t\tcurrentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n\t\t\tcurrentZoomDomain[1].valueOf() !== newDomain[1].valueOf()\n\t\t) {\n\t\t\tthis.handleDomainChange(newDomain)\n\t\t}\n\t}\n\n\tresetZoomDomain() {\n\t\t// get current zoomDomain\n\t\tconst currentZoomDomain = this.model.get('zoomDomain')\n\t\tconst newDomain = this.getDefaultZoomBarDomain()\n\n\t\t// only if zoomDomain needs update\n\t\tif (\n\t\t\tcurrentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n\t\t\tcurrentZoomDomain[1].valueOf() !== newDomain[1].valueOf()\n\t\t) {\n\t\t\tthis.handleDomainChange(newDomain)\n\t\t}\n\t}\n\n\t// check if current zoom domain is already the min zoom domain\n\t// when toolbar is rendered, we don't render chart yet\n\t// don't depend on scale range\n\tisMinZoomDomain() {\n\t\t// get current zoomDomain\n\t\tconst currentZoomDomain = this.model.get('zoomDomain')\n\t\t// assume the max zoom domain is the default zoom bar domain\n\t\tconst maxZoomDomain = this.getDefaultZoomBarDomain()\n\t\tif (!currentZoomDomain || !maxZoomDomain) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst currentZoomDomainPeriod = currentZoomDomain[1].valueOf() - currentZoomDomain[0].valueOf()\n\t\tconst maxZoomDomainPeriod = maxZoomDomain[1].valueOf() - maxZoomDomain[0].valueOf()\n\t\tconst minZoomRatio = getProperty(this.model.getOptions(), 'zoomBar', 'minZoomRatio')\n\t\t// if current zoom domain is already smaller than minZoomRatio\n\t\tif (currentZoomDomainPeriod / maxZoomDomainPeriod < minZoomRatio) {\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\t// check if current zoom domain is already the max zoom domain\n\tisMaxZoomDomain() {\n\t\t// get current zoom domain\n\t\tconst currentZoomDomain = this.model.get('zoomDomain')\n\t\t// assume the max zoom domain is the default zoom bar domain\n\t\tconst maxZoomDomain = this.getDefaultZoomBarDomain()\n\n\t\tif (\n\t\t\tcurrentZoomDomain &&\n\t\t\tmaxZoomDomain &&\n\t\t\tcurrentZoomDomain[0].valueOf() === maxZoomDomain[0].valueOf() &&\n\t\t\tcurrentZoomDomain[1].valueOf() === maxZoomDomain[1].valueOf()\n\t\t) {\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tisEmptyState() {\n\t\treturn this.getZoomBarData().length === 0\n\t}\n\n\tisZoomBarLoading(position: any) {\n\t\treturn getProperty(this.model.getOptions(), 'zoomBar', position, 'loading')\n\t}\n\n\tisZoomBarLocked(position: any) {\n\t\treturn getProperty(this.model.getOptions(), 'zoomBar', position, 'locked')\n\t}\n}\n"],"names":["flatten","array","length","baseFlatten","flatRest","func","setToString","overRest","baseSlice","start","end","index","result","parent","object","path","baseGet","baseUnset","castPath","toKey","last","customOmitClone","value","isPlainObject","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","paths","isDeep","arrayMap","copyObject","getAllKeysIn","baseClone","CanvasZoom","Service","focal","canvasElements","zoomSettings","x","y","zoomLevel","settings","canvasZoomSettings","width","height","DOMUtils","Events","select","type","listener","eventType","eventDetail","newEvent","Files","model","services","content","filename","anchor","mimeType","href","uri","name","link","Transitions","_a","t","animate","getProperty","transitionConfigs","compareAsc","dateLeft","dateRight","_dateLeft","toDate","_dateRight","diff","differenceInCalendarYears","differenceInYears","sign","difference","isLastYearNotFull","addMonths","date","amount","_date","constructFrom","dayOfMonth","endOfDesiredMonth","daysInMonth","addYears","subYears","differenceInCalendarMonths","yearDiff","monthDiff","endOfDay","endOfMonth","month","isLastDayOfMonth","differenceInMonths","isLastMonthNotFull","subMonths","differenceInDays","compareLocalAsc","differenceInCalendarDays","isLastDayNotFull","addDays","subDays","getRoundingMethod","method","number","differenceInMilliseconds","differenceInHours","options","millisecondsInHour","addMilliseconds","timestamp","addHours","subHours","differenceInMinutes","millisecondsInMinute","addMinutes","subMinutes","differenceInSeconds","addSeconds","subSeconds","CartesianScales","datum","groupMapsTo","axesOptions","dataset","groups","axisOptions","position","domainAxisPosition","rangeAxisPosition","title","AxisPositions","axisPositionKey","axisPosition","verticalAxesPositions","horizontalAxesPositions","domainAndRangeAxesPositions","CartesianOrientations","_b","_c","_d","domain","ScaleTypes","possibleXAxisPositions","possibleYAxisPositions","scale","scaleType","mapsTo","scaledValue","bounds","d","spaceToAddToEdges","addSpacingToTimeDomain","addSpacingToContinuousDomain","axisConfigs","dualAxes","mainVerticalAxisOptions","mainHorizontalAxisOptions","mainVerticalScaleType","mainHorizontalScaleType","includeZero","bins","max","stackKeys","displayData","extendLinearDomainBy","percentage","thresholds","ratioReference","ratioCompareTo","uniq","allDataValues","dataGroupNames","dataValuesGroupedByKeys","nonStackedGroupsData","stackedValues","dataValues","numericalValues","positiveSum","negativeSum","threshold","thresholdValue","extent","scaleTime","scaleLog","scaleBand","scaleLinear","domainRange","lowerBound","domainScale","highestThreshold","a","b","rangeScale","startDate","endDate","lower","upper","paddingRatio","padding","newUpper","newLower","Curves","curveLinear","curveLinearClosed","curveBasis","curveBasisClosed","curveBasisOpen","curveBundle","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","curveName","curveOptions","curve","optionName","Zoom","mainXAxisPosition","mainXScaleType","customZoomBarData","zoomBarData","allZoomBarData","cartesianScales","domainIdentifier","customDomain","newDomain","configs","zoomDomain","mergedConfigs","shouldUpdateRangeAxis","filteredData","zoomRatio","currentZoomDomain","handleWidth","zoomBarConfigs","xScale","currentX0","currentX1","fullRange","gap","newX0","newX1","maxZoomDomain","currentZoomDomainPeriod","maxZoomDomainPeriod","minZoomRatio"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]}